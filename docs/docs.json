[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "BingDaily.changeAllSpaces",
        "desc": "If `true` Spoon will set background image to all desktops (spaces)",
        "doc": "If `true` Spoon will set background image to all desktops (spaces)\n\nMacOS doesn't have nice API for it, so we're using hack - set watcher to space change and set Bing image to active space. Default: false",
        "name": "changeAllSpaces",
        "signature": "BingDaily.changeAllSpaces",
        "stripped_doc": "MacOS doesn't have nice API for it, so we're using hack - set watcher to space change and set Bing image to active space. Default: false",
        "type": "Variable"
      }
    ],
    "desc": "Use Bing daily picture as your wallpaper, automatically.",
    "doc": "Use Bing daily picture as your wallpaper, automatically.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip)",
    "items": [
      {
        "def": "BingDaily.changeAllSpaces",
        "desc": "If `true` Spoon will set background image to all desktops (spaces)",
        "doc": "If `true` Spoon will set background image to all desktops (spaces)\n\nMacOS doesn't have nice API for it, so we're using hack - set watcher to space change and set Bing image to active space. Default: false",
        "name": "changeAllSpaces",
        "signature": "BingDaily.changeAllSpaces",
        "stripped_doc": "MacOS doesn't have nice API for it, so we're using hack - set watcher to space change and set Bing image to active space. Default: false",
        "type": "Variable"
      }
    ],
    "name": "BingDaily",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "https://github.com/chriszarate/supergenpass-lib",
    "doc": "https://github.com/chriszarate/supergenpass-lib\nhttps://gist.github.com/prashanthrajagopal/08ab39d62725c8a8716b",
    "items": [],
    "name": "EasySuperGenPass",
    "stripped_doc": "https://gist.github.com/prashanthrajagopal/08ab39d62725c8a8716b",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "MacroS.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "MacroS.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A new Sample Spoon",
    "doc": "A new Sample Spoon\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MacroS.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MacroS.spoon.zip)",
    "items": [
      {
        "def": "MacroS.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "MacroS.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "MacroS",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MacroS.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MacroS.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseCircle:init()",
        "desc": "Initial setup. It's empty currently",
        "doc": "Initial setup. It's empty currently",
        "name": "init",
        "signature": "MouseCircle:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:toggle()",
        "desc": "Toggle visibility of circle around mouse position",
        "doc": "Toggle visibility of circle around mouse position",
        "name": "toggle",
        "signature": "MouseCircle:toggle()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "doc": "Draws a circle around the mouse pointer when a hotkey is pressed\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "items": [
      {
        "def": "MouseCircle:init()",
        "desc": "Initial setup. It's empty currently",
        "doc": "Initial setup. It's empty currently",
        "name": "init",
        "signature": "MouseCircle:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:toggle()",
        "desc": "Toggle visibility of circle around mouse position",
        "doc": "Toggle visibility of circle around mouse position",
        "name": "toggle",
        "signature": "MouseCircle:toggle()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseCircle",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PushToTalk:init()",
        "desc": "Starts menu and key watcher",
        "doc": "Starts menu and key watcher",
        "name": "init",
        "signature": "PushToTalk:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:stop()",
        "desc": "Stops PushToTalk",
        "doc": "Stops PushToTalk",
        "name": "stop",
        "signature": "PushToTalk:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:toggleStates()",
        "desc": "Cycle states in order",
        "doc": "Cycle states in order\n\nParameters:\n * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`",
        "name": "toggleStates",
        "parameters": [
          " * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`"
        ],
        "signature": "PushToTalk:toggleStates()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PushToTalk.app_switcher",
        "desc": "Takes mapping from application name to mic state.",
        "doc": "Takes mapping from application name to mic state.\nFor example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "name": "app_switcher",
        "signature": "PushToTalk.app_switcher",
        "stripped_doc": "For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "type": "Variable"
      }
    ],
    "desc": "Implements push-to-talk and push-to-mute functionality with `fn` key.",
    "doc": "Implements push-to-talk and push-to-mute functionality with `fn` key.\nI implemented this after reading Gitlab remote handbook https://about.gitlab.com/handbook/communication/ about Shush utility.\n\nMy workflow:\n\nWhen Zoom starts, PushToTalk automatically changes mic state from `default`\nto `push-to-talk`, so I need to press `fn` key to unmute myself and speak.\nIf I need to actively chat in group meeting or it's one-on-one meeting,\nI'm switching to `push-to-mute` state, so mic will be unmute by default and `fn` key mutes it.\n\nPushToTalk has menubar with colorful icons so you can easily see current mic state.\n\nSample config: `spoon.SpoonInstall:andUse(\"PushToTalk\", {start = true, config = { app_switcher = { ['zoom.us'] = 'push-to-talk' }}})`\nand separate keybinding to toggle states with lambda function `function() spoon.PushToTalk.toggleStates({'push-to-talk', 'release-to-talk'}) end`\n\nCheck out my config: https://github.com/skrypka/hammerspoon_config/blob/master/init.lua",
    "items": [
      {
        "def": "PushToTalk.app_switcher",
        "desc": "Takes mapping from application name to mic state.",
        "doc": "Takes mapping from application name to mic state.\nFor example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "name": "app_switcher",
        "signature": "PushToTalk.app_switcher",
        "stripped_doc": "For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "type": "Variable"
      },
      {
        "def": "PushToTalk:init()",
        "desc": "Starts menu and key watcher",
        "doc": "Starts menu and key watcher",
        "name": "init",
        "signature": "PushToTalk:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:stop()",
        "desc": "Stops PushToTalk",
        "doc": "Stops PushToTalk",
        "name": "stop",
        "signature": "PushToTalk:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:toggleStates()",
        "desc": "Cycle states in order",
        "doc": "Cycle states in order\n\nParameters:\n * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`",
        "name": "toggleStates",
        "parameters": [
          " * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`"
        ],
        "signature": "PushToTalk:toggleStates()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "PushToTalk",
    "stripped_doc": "I implemented this after reading Gitlab remote handbook https://about.gitlab.com/handbook/communication/ about Shush utility.\n\nMy workflow:\n\nWhen Zoom starts, PushToTalk automatically changes mic state from `default`\nto `push-to-talk`, so I need to press `fn` key to unmute myself and speak.\nIf I need to actively chat in group meeting or it's one-on-one meeting,\nI'm switching to `push-to-mute` state, so mic will be unmute by default and `fn` key mutes it.\n\nPushToTalk has menubar with colorful icons so you can easily see current mic state.\n\nSample config: `spoon.SpoonInstall:andUse(\"PushToTalk\", {start = true, config = { app_switcher = { ['zoom.us'] = 'push-to-talk' }}})`\nand separate keybinding to toggle states with lambda function `function() spoon.PushToTalk.toggleStates({'push-to-talk', 'release-to-talk'}) end`\n\nCheck out my config: https://github.com/skrypka/hammerspoon_config/blob/master/init.lua",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WatsonStatus:start()",
        "desc": "Starts WatsonStatus",
        "doc": "Starts WatsonStatus\n\nParameters:\n * None\n\nReturns:\n * The WatsonStatus object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WatsonStatus object"
        ],
        "signature": "WatsonStatus:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WatsonStatus:stop()",
        "desc": "Stops WatsonStatus",
        "doc": "Stops WatsonStatus\n\nParameters:\n * None\n\nReturns:\n * The WatsonStatus objectini",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WatsonStatus objectini"
        ],
        "signature": "WatsonStatus:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WatsonStatus.watsonbin",
        "desc": "Path to watson binary. Default: `/usr/local/bin/watson`",
        "doc": "Path to watson binary. Default: `/usr/local/bin/watson`",
        "name": "watsonbin",
        "signature": "WatsonStatus.watsonbin",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WatsonStatus.watsonfolder",
        "desc": "Path to watson folder. Spoon set folder watch on it to monitor changes. Default: `/Users/roman/Library/Application Support/watson`",
        "doc": "Path to watson folder. Spoon set folder watch on it to monitor changes. Default: `/Users/roman/Library/Application Support/watson`",
        "name": "watsonfolder",
        "signature": "WatsonStatus.watsonfolder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Display in menubar status from time tracker CLI Watson https://github.com/TailorDev/Watson",
    "doc": "Display in menubar status from time tracker CLI Watson https://github.com/TailorDev/Watson\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WatsonStatus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WatsonStatus.spoon.zip)",
    "items": [
      {
        "def": "WatsonStatus:start()",
        "desc": "Starts WatsonStatus",
        "doc": "Starts WatsonStatus\n\nParameters:\n * None\n\nReturns:\n * The WatsonStatus object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WatsonStatus object"
        ],
        "signature": "WatsonStatus:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WatsonStatus:stop()",
        "desc": "Stops WatsonStatus",
        "doc": "Stops WatsonStatus\n\nParameters:\n * None\n\nReturns:\n * The WatsonStatus objectini",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WatsonStatus objectini"
        ],
        "signature": "WatsonStatus:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WatsonStatus.watsonbin",
        "desc": "Path to watson binary. Default: `/usr/local/bin/watson`",
        "doc": "Path to watson binary. Default: `/usr/local/bin/watson`",
        "name": "watsonbin",
        "signature": "WatsonStatus.watsonbin",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WatsonStatus.watsonfolder",
        "desc": "Path to watson folder. Spoon set folder watch on it to monitor changes. Default: `/Users/roman/Library/Application Support/watson`",
        "doc": "Path to watson folder. Spoon set folder watch on it to monitor changes. Default: `/Users/roman/Library/Application Support/watson`",
        "name": "watsonfolder",
        "signature": "WatsonStatus.watsonfolder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "WatsonStatus",
    "stripped_doc": "Download: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WatsonStatus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WatsonStatus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]